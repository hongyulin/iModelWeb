{"version":3,"sources":["file:///webpack/universalModuleDefinition","file:///D:\\update\\0108\\imodeljs\\plugins\\wms\\src\\wmsPlugin.ts","file:///external \"bentleyjs_core\"","file:///external \"imodeljs_common\"","file:///external \"imodeljs_frontend\""],"names":["root","factory","exports","module","require","define","amd","this","__WEBPACK_EXTERNAL_MODULE__bentley_bentleyjs_core__","__WEBPACK_EXTERNAL_MODULE__bentley_imodeljs_common__","__WEBPACK_EXTERNAL_MODULE__bentley_imodeljs_frontend__","bentleyjs_core_1","__webpack_require__","imodeljs_common_1","imodeljs_frontend_1","WMSImageryProvider","ImageryProviderEPSG3857","[object Object]","imageryType","_i18n","_i18NNamespace","_logoImage","super","date","Date","setDate","getDate","timeString","toISOString","_baseUrl","tileWidth","tileHeight","minimumZoomLevel","maximumZoomLevel","row","column","zoomLevel","tileExtent","getEPSG3857Extent","bboxString","left","bottom","right","top","replace","_tileProvider","IModelApp","makeLogoCard","iconSrc","heading","notice","translate","readFinished","WMSTreeSupplier","plugin","_plugin","lhs","rhs","compareNumbers","type","iModel","createTileTreeFromImageryProvider","imageryProviders","GlobeMode","Columbus","WMSTreeRef","MapTileTreeReference","_graphicType","TileTree","GraphicType","Overlay","_groundBias","_imageryProvider","currentImageryProvider","_transparency","treeOwner","tiles","getTileTreeOwner","currentImageryType","treeSupplier","WMSGraphicsProvider","_tree","vp","func","pluginAdmin","register","WMSPlugin","Plugin","name","_currentImageryType","_args","i18n","registerNamespace","logoImage","resolveResourceUrl","push","selectedView","viewManager","undefined","_graphicsProvider","addTiledGraphicsProvider","weatherType","then","message","msgDetails","NotifyMessageDetails","OutputMessagePriority","Info","notifications","outputMessage","catch"],"mappings":"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","file":"wmsPlugin.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"bentleyjs_core\"), require(\"imodeljs_common\"), require(\"imodeljs_frontend\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"wmsPlugin\", [\"bentleyjs_core\", \"imodeljs_common\", \"imodeljs_frontend\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"wmsPlugin\"] = factory(require(\"bentleyjs_core\"), require(\"imodeljs_common\"), require(\"imodeljs_frontend\"));\n\telse\n\t\troot[\"wmsPlugin\"] = factory(root[\"bentleyjs_core\"], root[\"imodeljs_common\"], root[\"imodeljs_frontend\"]);\n})(this, function(__WEBPACK_EXTERNAL_MODULE__bentley_bentleyjs_core__, __WEBPACK_EXTERNAL_MODULE__bentley_imodeljs_common__, __WEBPACK_EXTERNAL_MODULE__bentley_imodeljs_frontend__) {\nreturn ","/*---------------------------------------------------------------------------------------------\r\n* Copyright (c) 2019 Bentley Systems, Incorporated. All rights reserved.\r\n* Licensed under the MIT License. See LICENSE.md in the project root for license terms.\r\n*--------------------------------------------------------------------------------------------*/\r\n\r\nimport { compareNumbers } from \"@bentley/bentleyjs-core\";\r\nimport { GlobeMode } from \"@bentley/imodeljs-common\";\r\nimport {\r\n  createTileTreeFromImageryProvider,\r\n  ImageryProviderEPSG3857,\r\n  IModelApp,\r\n  IModelConnection,\r\n  MapTileTreeReference,\r\n  NotifyMessageDetails,\r\n  OutputMessagePriority,\r\n  Plugin,\r\n  ScreenViewport,\r\n  TiledGraphicsProvider,\r\n  TileTree,\r\n  Viewport,\r\n} from \"@bentley/imodeljs-frontend\";\r\nimport { I18N, I18NNamespace } from \"@bentley/imodeljs-i18n\";\r\n\r\nconst enum WMSImageryType { Temperature, Precipitation }\r\n\r\n/** Supplies imagery based on weather forecast. */\r\nclass WMSImageryProvider extends ImageryProviderEPSG3857 {\r\n  private _baseUrl: string;\r\n\r\n  constructor(imageryType: WMSImageryType, private _i18n: I18N, private _i18NNamespace: I18NNamespace, private _logoImage?: string | HTMLImageElement) {\r\n    super();\r\n\r\n    // this url should be generated from a user interface that allows selection of forecast parameters.\r\n    const date: Date = new Date();\r\n    date.setDate(date.getDate() - 1);\r\n    const timeString = date.toISOString();\r\n    this._baseUrl = \"\";\r\n\r\n    if (WMSImageryType.Temperature === imageryType) {\r\n      this._baseUrl =\r\n        \"http://wms.actionmodulers.com/wms/wms?SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&FORMAT=image%2Fpng&\" +\r\n        `TRANSPARENT=true&LAYERS=TM_WORLD_BORDERS-0.3%2CHRRR_USA_0.03_SubHourly%20%5Bair%20temperature%5D&TILED=true&MAP_TYPE=DEF&TIME=${timeString}` +\r\n        \"&WIDTH=256&HEIGHT=256&CRS=EPSG%3A3857&STYLES=&BBOX={BoundingBox}\";\r\n    } else {\r\n      this._baseUrl =\r\n        \"http://wms.actionmodulers.com/wms/wms?SERVICE=WMS&VERSION=1.3.0&REQUEST=GetMap&FORMAT=image%2Fpng&\" +\r\n        `TRANSPARENT=true&LAYERS=TM_WORLD_BORDERS-0.3%2CHRRR_USA_0.03_SubHourly%20%5Bprecipitation%5D&TILED=true&MAP_TYPE=DEF&TIME=${timeString}` +\r\n        \"&WIDTH=256&HEIGHT=256&CRS=EPSG%3A3857&STYLES=&BBOX={BoundingBox}\";\r\n    }\r\n  }\r\n\r\n  public get tileWidth(): number { return 256; }\r\n  public get tileHeight(): number { return 256; }\r\n  public get minimumZoomLevel(): number { return 4; }\r\n  public get maximumZoomLevel(): number { return 20; }\r\n\r\n  // construct the Url from the desired Tile\r\n  public constructUrl(row: number, column: number, zoomLevel: number): string {\r\n    const tileExtent = this.getEPSG3857Extent(row, column, zoomLevel);\r\n    const bboxString = `${tileExtent.left},${tileExtent.bottom},${tileExtent.right},${tileExtent.top}`;\r\n\r\n    // from the template url, construct the tile url.\r\n    return this._baseUrl.replace(\"{BoundingBox}\", bboxString);\r\n  }\r\n\r\n  /** Supplies attribution for the wms supplier. */\r\n  public getImageryLogo(_tileProvider: MapTileTreeReference) {\r\n    return IModelApp.makeLogoCard({ iconSrc: this._logoImage, heading: \"WMS\", notice: this._i18n.translate(\"WmsPlugin:Messages.Copyright\") });\r\n  }\r\n\r\n  public async initialize(): Promise<void> {\r\n    return this._i18NNamespace.readFinished;\r\n  }\r\n}\r\n\r\n/** Supplies a TileTree that can load and draw tiles based on our imagery provider.\r\n * The TileTree is uniquely identified by its imagery type.\r\n */\r\nclass WMSTreeSupplier implements TileTree.Supplier {\r\n  private readonly _plugin: WMSPlugin;\r\n\r\n  public constructor(plugin: WMSPlugin) {\r\n    this._plugin = plugin;\r\n  }\r\n\r\n  /** Return a numeric value indicating how two tree IDs are ordered relative to one another.\r\n   * This allows the ID to serve as a lookup key to find the corresponding TileTree.\r\n   */\r\n  public compareTileTreeIds(lhs: WMSImageryType, rhs: WMSImageryType): number {\r\n    return compareNumbers(lhs, rhs);\r\n  }\r\n\r\n  /** The first time a tree of a particular imagery type is requested, this function creates it. */\r\n  public async createTileTree(type: WMSImageryType, iModel: IModelConnection): Promise<TileTree | undefined> {\r\n    return createTileTreeFromImageryProvider(this._plugin.imageryProviders[type], 0.0, false, GlobeMode.Columbus, iModel);\r\n  }\r\n}\r\n\r\n/** A reference to one of our tile trees. The specific TileTree drawn may change when the desired imagery type or target iModel changes. */\r\nclass WMSTreeRef extends MapTileTreeReference {\r\n  private readonly _plugin: WMSPlugin;\r\n  public iModel: IModelConnection;\r\n\r\n  public constructor(plugin: WMSPlugin, iModel: IModelConnection) {\r\n    super();\r\n    this._plugin = plugin;\r\n    this.iModel = iModel;\r\n  }\r\n\r\n  /** Draw our tiles on top of all other geometry (semi-transparent). */\r\n  protected get _graphicType() { return TileTree.GraphicType.Overlay; }\r\n  /** Draw our tiles at sea level. */\r\n  protected get _groundBias() { return 0.0; }\r\n  protected get _imageryProvider() { return this._plugin.currentImageryProvider; }\r\n  protected get _transparency() { return 0.7; }\r\n\r\n  /** Return the owner of the TileTree to draw. */\r\n  public get treeOwner(): TileTree.Owner {\r\n    return this.iModel.tiles.getTileTreeOwner(this._plugin.currentImageryType, this._plugin.treeSupplier);\r\n  }\r\n}\r\n\r\n/** Integrates with a Viewport to inject our own tiled graphics for display. */\r\nclass WMSGraphicsProvider implements TiledGraphicsProvider {\r\n  private readonly _tree: WMSTreeRef;\r\n\r\n  public constructor(iModel: IModelConnection, plugin: WMSPlugin) {\r\n    this._tree = new WMSTreeRef(plugin, iModel);\r\n  }\r\n\r\n  /** Returns the tree containing the tiles to be drawn in the specified viewport. */\r\n  public forEachTileTreeRef(vp: Viewport, func: (ref: TileTree.Reference) => void): void {\r\n    // In case the user opened a view from a different iModel, make sure the tree reference uses the current iModel.\r\n    this._tree.iModel = vp.iModel;\r\n    func(this._tree);\r\n  }\r\n}\r\n\r\nclass WMSPlugin extends Plugin {\r\n  public readonly imageryProviders: WMSImageryProvider[] = [];\r\n  public readonly treeSupplier: TileTree.Supplier;\r\n  private _currentImageryType = WMSImageryType.Precipitation;\r\n  private _i18NNamespace?: I18NNamespace;\r\n  private _graphicsProvider?: WMSGraphicsProvider;\r\n\r\n  public get currentImageryType() { return this._currentImageryType; }\r\n  public get currentImageryProvider() { return this.imageryProviders[this.currentImageryType]; }\r\n\r\n  public constructor(name: string) {\r\n    super(name);\r\n    this.treeSupplier = new WMSTreeSupplier(this);\r\n  }\r\n\r\n  /** Invoked the first time this plugin is loaded. */\r\n  public onLoad(_args: string[]): void {\r\n    this._i18NNamespace = this.i18n.registerNamespace(\"WmsPlugin\");\r\n    const logoImage = this.resolveResourceUrl(\"wmsPlugin.svg\");\r\n\r\n    this.imageryProviders.push(new WMSImageryProvider(WMSImageryType.Temperature, this.i18n, this._i18NNamespace, logoImage));\r\n    this.imageryProviders.push(new WMSImageryProvider(WMSImageryType.Precipitation, this.i18n, this._i18NNamespace, logoImage));\r\n  }\r\n\r\n  /** Invoked each time this plugin is loaded. */\r\n  public onExecute(_args: string[]): void {\r\n    const selectedView: ScreenViewport | undefined = IModelApp.viewManager.selectedView;\r\n    if (undefined === selectedView)\r\n      return;\r\n\r\n    if (undefined === this._graphicsProvider)\r\n      this._graphicsProvider = new WMSGraphicsProvider(selectedView.iModel, this);\r\n\r\n    // Register our provider to supply tiles into the selected viewport (if not already registered)\r\n    selectedView.addTiledGraphicsProvider(this._graphicsProvider);\r\n\r\n    // For demonstration purposes, switch the imagery type each time the plugin is loaded.\r\n    this._currentImageryType = (WMSImageryType.Temperature === this._currentImageryType) ? WMSImageryType.Precipitation : WMSImageryType.Temperature;\r\n\r\n    // Output a message indicating the current imagery type.\r\n    const weatherType = (WMSImageryType.Temperature === this._currentImageryType) ? \"temperature\" : \"precipitation\";\r\n    this._i18NNamespace!.readFinished.then(() => {\r\n      const message: string = this.i18n.translate(\"WmsPlugin:Messages.DisplayType\", { weatherType });\r\n      const msgDetails: NotifyMessageDetails = new NotifyMessageDetails(OutputMessagePriority.Info, message);\r\n      IModelApp.notifications.outputMessage(msgDetails);\r\n    }).catch(() => { });\r\n  }\r\n}\r\n\r\ndeclare var PLUGIN_NAME: string;\r\n\r\nIModelApp.pluginAdmin.register(new WMSPlugin(PLUGIN_NAME));\r\n","module.exports = __WEBPACK_EXTERNAL_MODULE__bentley_bentleyjs_core__;","module.exports = __WEBPACK_EXTERNAL_MODULE__bentley_imodeljs_common__;","module.exports = __WEBPACK_EXTERNAL_MODULE__bentley_imodeljs_frontend__;"],"sourceRoot":""}